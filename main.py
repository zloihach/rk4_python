#Составить алгоритм и написать код для численного решения ОДУ y^n=e^-x методом РК4
#X0 = 0, y(X0) = 0, y'(X0)=0, xk=2.5, deltaX = 0.1
#Шаг интегрирования выбирается самостоятельно, результат интрегрирования сводится в таблицу решений
#И представляются также в виде графиков функций

import numpy as np
import matplotlib.pyplot as plt

def f(x, y):
    return np.exp(-x)

def RK4(x0, y0, y1, h, n):
    x = np.zeros(n)
    y = np.zeros(n)
    x[0] = x0
    y[0] = y0
    y[1] = y1
    for i in range(1, n-1):
        k1 = f(x[i-1], y[i-1])
        k2 = f(x[i-1] + h/2, y[i-1] + h*k1/2)
        k3 = f(x[i-1] + h/2, y[i-1] + h*k2/2)
        k4 = f(x[i-1] + h, y[i-1] + h*k3)
        y[i+1] = y[i-1] + h*(k1 + 2*k2 + 2*k3 + k4)/6
        x[i+1] = x[i-1] + h
    return x, y

x0 = 0
y0 = 0
y1 = 0
h = 0.1
n = 25
x, y = RK4(x0, y0, y1, h, n)
print("x = ", x)
print("y = ", y)

plt.plot(x, y, 'r')
plt.show()

#Составить алгоритм и написать код для численного решения ОДУ y^n=e^-x методом РК4
#X0 = 0, y(X0) = 0, y'(X0)=0, xk=2.5, deltaX = 0.1
#Шаг интегрирования выбирается самостоятельно, результат интрегрирования сводится в таблицу решений
#И представляются также в виде графиков функций


# Path: main.py
